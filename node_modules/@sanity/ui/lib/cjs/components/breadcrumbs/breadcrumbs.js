var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
__export(exports, {
  Breadcrumbs: () => Breadcrumbs
});
var import_react = __toModule(require("react"));
var import_hooks = __toModule(require("../../hooks"));
var import_primitives = __toModule(require("../../primitives"));
var import_breadcrumbs = __toModule(require("./breadcrumbs.styles"));
const Breadcrumbs = (0, import_react.forwardRef)(function Breadcrumbs2(props, ref) {
  const { children, maxLength, separator, space = 2 } = props;
  const [open, setOpen] = (0, import_react.useState)(false);
  const [expandElement, setExpandElement] = (0, import_react.useState)(null);
  const [popoverElement, setPopoverElement] = (0, import_react.useState)(null);
  const collapse = (0, import_react.useCallback)(() => setOpen(false), []);
  const expand = (0, import_react.useCallback)(() => setOpen(true), []);
  (0, import_hooks.useClickOutside)(collapse, [expandElement, popoverElement]);
  const rawItems = (0, import_react.useMemo)(() => import_react.Children.toArray(children).filter((child) => {
    return (0, import_react.isValidElement)(child);
  }), [children]);
  const items = (0, import_react.useMemo)(() => {
    const len = rawItems.length;
    if (maxLength && len > maxLength) {
      const beforeLength = Math.ceil(maxLength / 2);
      const afterLength = Math.floor(maxLength / 2);
      return [
        ...rawItems.slice(0, beforeLength - 1),
        /* @__PURE__ */ import_react.default.createElement(import_primitives.Popover, {
          constrainSize: true,
          content: /* @__PURE__ */ import_react.default.createElement(import_primitives.Stack, {
            as: "ol",
            overflow: "auto",
            padding: space,
            space
          }, rawItems.slice(beforeLength - 1, len - afterLength)),
          key: "button",
          open,
          placement: "top",
          portal: true,
          ref: setPopoverElement
        }, /* @__PURE__ */ import_react.default.createElement(import_breadcrumbs.ExpandButton, {
          fontSize: 1,
          mode: "bleed",
          onClick: open ? collapse : expand,
          padding: 1,
          ref: setExpandElement,
          selected: open,
          text: "\u2026"
        })),
        ...rawItems.slice(len - afterLength)
      ];
    }
    return rawItems;
  }, [collapse, expand, maxLength, open, rawItems, space]);
  return /* @__PURE__ */ import_react.default.createElement(import_breadcrumbs.Root, {
    ref
  }, items.map((item, itemIndex) => /* @__PURE__ */ import_react.default.createElement(import_react.Fragment, {
    key: itemIndex
  }, itemIndex > 0 && /* @__PURE__ */ import_react.default.createElement(import_primitives.Box, {
    "aria-hidden": true,
    as: "li",
    paddingX: space
  }, separator || /* @__PURE__ */ import_react.default.createElement(import_primitives.Text, {
    muted: true
  }, "/")), /* @__PURE__ */ import_react.default.createElement(import_primitives.Box, {
    as: "li"
  }, item))));
});
