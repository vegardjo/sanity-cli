{
  "version": 3,
  "sources": ["../../../../src/components/autocomplete/autocomplete.tsx"],
  "sourcesContent": ["import {ChevronDownIcon, SpinnerIcon} from '@sanity/icons'\nimport React, {\n  cloneElement,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport styled, {keyframes} from 'styled-components'\nimport {EMPTY_ARRAY} from '../../constants'\nimport {focusFirstDescendant} from '../../helpers'\nimport {useForwardedRef, useResponsiveProp} from '../../hooks'\nimport {\n  Box,\n  BoxProps,\n  Button,\n  ButtonProps,\n  Card,\n  Popover,\n  PopoverProps,\n  Stack,\n  Text,\n  TextInput,\n} from '../../primitives'\nimport {Placement, PopoverMargins} from '../../types'\nimport {AutocompleteOption} from './autocompleteOption'\n\n/**\n * @public\n */\nexport type AutocompleteOpenButtonProps = Omit<ButtonProps, 'as'> &\n  Omit<React.HTMLProps<HTMLButtonElement>, 'as' | 'ref'>\n\n/**\n * @public\n */\nexport interface BaseAutocompleteOption {\n  value: string\n}\n\n/**\n * @public\n */\nexport interface AutocompleteProps<Option extends BaseAutocompleteOption> {\n  border?: boolean\n  customValidity?: string\n  filterOption?: (query: string, option: Option) => boolean\n  fontSize?: number | number[]\n  icon?: React.ComponentType | React.ReactNode\n  id: string\n  /**\n   * @beta\n   */\n  listBox?: BoxProps\n  loading?: boolean\n  onChange?: (value: string) => void\n  onQueryChange?: (query: string | null) => void\n  onSelect?: (value: string) => void\n  /**\n   * @beta\n   */\n  openButton?: boolean | AutocompleteOpenButtonProps\n  options?: Option[]\n  padding?: number | number[]\n  popover?: Omit<PopoverProps, 'content' | 'onMouseEnter' | 'onMouseLeave' | 'open'>\n  prefix?: React.ReactNode\n  radius?: number | number[]\n  renderOption?: (option: Option) => React.ReactElement\n  /**\n   * @beta\n   */\n  renderPopover?: (\n    props: {\n      content: React.ReactElement | null\n      hidden: boolean\n      inputElement: HTMLInputElement | null\n    },\n    ref: React.Ref<HTMLDivElement>\n  ) => React.ReactNode\n  renderValue?: (value: string, option?: Option) => string\n  suffix?: React.ReactNode\n  value?: string\n}\n\nconst POPOVER_MARGINS: PopoverMargins = [0, 1, 1, 1]\nconst POPOVER_PLACEMENT: Placement = 'bottom-start'\nconst POPOVER_FALLBACK_PLACEMENTS: Placement[] = ['top-start']\n\nconst Root = styled.div`\n  position: relative;\n`\n\nconst ListBox = styled(Box)`\n  & > ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n  }\n`\n\nconst ResultsPopover = styled(Popover)`\n  & > div {\n    min-height: 43px;\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n  }\n\n  &[data-popper-reference-hidden='true'] {\n    display: none;\n  }\n`\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst AnimatedSpinnerIcon = styled(SpinnerIcon)`\n  animation: ${rotate} 500ms linear infinite;\n`\n\nconst EMPTY_RECORD = {}\n\nconst defaultRenderValue = (value: string, option?: BaseAutocompleteOption) =>\n  option ? option.value : value\n\nconst defaultFilterOption = (query: string, option: BaseAutocompleteOption) =>\n  option.value.toLowerCase().indexOf(query.toLowerCase()) > -1\n\nconst LIST_IGNORE_KEYS = [\n  'Control',\n  'Shift',\n  'Alt',\n  'Enter',\n  'Home',\n  'End',\n  'PageUp',\n  'PageDown',\n  'Meta',\n  'Tab',\n  'CapsLock',\n]\n\nconst InnerAutocomplete = forwardRef(function InnerAutocomplete<\n  Option extends BaseAutocompleteOption\n>(\n  props: AutocompleteProps<Option> &\n    Omit<\n      React.HTMLProps<HTMLInputElement>,\n      | 'aria-activedescendant'\n      | 'aria-autocomplete'\n      | 'aria-expanded'\n      | 'aria-owns'\n      | 'as'\n      | 'autoCapitalize'\n      | 'autoComplete'\n      | 'autoCorrect'\n      | 'id'\n      | 'inputMode'\n      | 'onChange'\n      | 'onSelect'\n      | 'prefix'\n      | 'ref'\n      | 'role'\n      | 'spellCheck'\n      | 'type'\n      | 'value'\n    >,\n  ref: React.Ref<HTMLInputElement>\n) {\n  const {\n    border = true,\n    customValidity,\n    disabled,\n    filterOption: filterOptionProp,\n    fontSize = 2,\n    icon,\n    id,\n    listBox = {},\n    loading,\n    onBlur,\n    onChange,\n    onFocus,\n    onQueryChange,\n    onSelect,\n    openButton,\n    options: optionsProp,\n    padding: paddingProp = 3,\n    popover = {},\n    prefix,\n    radius = 3,\n    readOnly,\n    renderOption: renderOptionProp,\n    renderPopover,\n    renderValue = defaultRenderValue,\n    value: valueProp = '',\n    ...restProps\n  } = props\n\n  const defaultRenderOption = useCallback(\n    ({value}: BaseAutocompleteOption) => (\n      <Card data-as=\"button\" padding={paddingProp} radius={2} tone=\"inherit\">\n        <Text size={fontSize} textOverflow=\"ellipsis\">\n          {value}\n        </Text>\n      </Card>\n    ),\n    [fontSize, paddingProp]\n  )\n\n  const renderOption =\n    typeof renderOptionProp === 'function' ? renderOptionProp : defaultRenderOption\n  const filterOption =\n    typeof filterOptionProp === 'function' ? filterOptionProp : defaultFilterOption\n  const [value, setValue] = useState(valueProp)\n  const [query, setQuery] = useState<string | null>(null)\n  const valueRef = useRef(value)\n  const [focused, setFocused] = useState(false)\n  const listboxId = `${id}-listbox`\n  const options = Array.isArray(optionsProp) ? optionsProp : EMPTY_ARRAY\n  const [activeIndex, setActiveIndex] = useState(-1)\n  const inputRef = useRef<HTMLInputElement | null>(null)\n  const listRef = useRef<HTMLDivElement | null>(null)\n  const padding = useResponsiveProp(paddingProp)\n  const [rootElement, setRootElement] = useState<HTMLDivElement | null>(null)\n  const [resultsPopoverElement, setResultsPopoverElement] = useState<HTMLDivElement | null>(null)\n  const currentOption = value ? options.find((o) => o.value === value) : undefined\n  const filteredOptions = useMemo(\n    () => options.filter((option) => (query ? filterOption(query, option) : true)),\n    [filterOption, options, query]\n  )\n  const activeItemId = filteredOptions[activeIndex]\n    ? `${id}-option-${filteredOptions[activeIndex].value}`\n    : undefined\n  const optionsLen = filteredOptions.length\n  const expanded = (query !== null && loading) || (focused && optionsLen > 0 && query !== null)\n  const forwardedRef = useForwardedRef(ref)\n  const popoverMouseWithinRef = useRef(false)\n\n  const handleRootBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      setTimeout(() => {\n        // NOTE: This is a workaround for a bug that may happen in Chrome (clicking the scrollbar\n        // closes the results in certain situations):\n        // - Do not handle blur if the mouse is within the popover\n        if (popoverMouseWithinRef.current) {\n          return\n        }\n\n        const focusedEl = document.activeElement\n        const focusInside =\n          (focusedEl && rootElement && rootElement.contains(focusedEl)) ||\n          (focusedEl && resultsPopoverElement && resultsPopoverElement.contains(focusedEl))\n\n        if (!focusInside) {\n          setFocused(false)\n          setQuery(null)\n          if (onQueryChange) onQueryChange(null)\n          if (onBlur) onBlur(event)\n        }\n      }, 0)\n    },\n    [onBlur, onQueryChange, resultsPopoverElement, rootElement]\n  )\n\n  const handleOptionSelect = useCallback(\n    (v: string) => {\n      if (onSelect) onSelect(v)\n      setValue(v)\n      if (onChange) onChange(v)\n      setQuery(null)\n      if (onQueryChange) onQueryChange(null)\n      setFocused(false)\n      inputRef.current?.focus()\n      popoverMouseWithinRef.current = false\n    },\n    [onChange, onSelect, onQueryChange]\n  )\n\n  const handleRootKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      const filteredOptionsLen = filteredOptions.length\n\n      if (event.key === 'ArrowDown') {\n        event.preventDefault()\n        if (!filteredOptionsLen) return\n        setActiveIndex((index) => (index + 1) % filteredOptionsLen)\n\n        return\n      }\n\n      if (event.key === 'ArrowUp') {\n        event.preventDefault()\n        if (!filteredOptionsLen) return\n        setActiveIndex((index) => {\n          return index === -1\n            ? filteredOptionsLen - 1\n            : (filteredOptionsLen + index - 1) % filteredOptionsLen\n        })\n\n        return\n      }\n\n      if (event.key === 'Escape') {\n        setFocused(false)\n        valueRef.current = ''\n        setQuery(null)\n        if (onQueryChange) onQueryChange(null)\n\n        inputRef.current?.focus()\n\n        return\n      }\n\n      if (event.key === 'Enter') {\n        event.preventDefault()\n        event.stopPropagation()\n\n        const activeOpen = filteredOptions[activeIndex]\n\n        if (activeOpen) {\n          handleOptionSelect(activeOpen.value)\n        }\n\n        return\n      }\n\n      const target = event.target as Node\n      const listEl = listRef.current\n\n      if (\n        (listEl === target || listEl?.contains(target)) &&\n        !LIST_IGNORE_KEYS.includes(event.key)\n      ) {\n        inputRef.current?.focus()\n\n        return\n      }\n    },\n    [filteredOptions, handleOptionSelect, onQueryChange, activeIndex]\n  )\n\n  const handleInputChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const q = event.currentTarget.value\n\n      valueRef.current = q\n      setQuery(q)\n\n      if (!focused) {\n        setFocused(true)\n      }\n\n      if (onQueryChange) onQueryChange(q)\n    },\n    [focused, onQueryChange]\n  )\n\n  const handleInputFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      if (!focused) {\n        setFocused(true)\n        if (onFocus) onFocus(event)\n      }\n    },\n    [focused, onFocus]\n  )\n\n  const handlePopoverMouseEnter = useCallback(() => {\n    popoverMouseWithinRef.current = true\n  }, [])\n\n  const handlePopoverMouseLeave = useCallback(() => {\n    popoverMouseWithinRef.current = false\n  }, [])\n\n  const handleClearButtonClick = useCallback(() => {\n    valueRef.current = ''\n    setValue('')\n    if (onChange) onChange('')\n    setQuery(null)\n    if (onQueryChange) onQueryChange(null)\n    inputRef.current?.focus()\n  }, [onChange, onQueryChange])\n\n  const handleClearButtonFocus = useCallback(() => setFocused(true), [])\n\n  // Change the value when `value` prop changes\n  useEffect(() => {\n    if (valueProp !== valueRef.current) {\n      valueRef.current = valueProp\n      setValue(valueProp)\n      setQuery(null)\n    }\n  }, [valueProp])\n\n  // Reset selected item when the list changes\n  // @todo: what if the list length didn\u2019t change, but the list contents changed?\n  useEffect(() => setActiveIndex(-1), [optionsLen])\n\n  // Focus the selected item\n  useEffect(() => {\n    const listElement = listRef.current\n\n    if (!listElement) return\n\n    const activeItemElement = listElement.childNodes[activeIndex] as HTMLLIElement | undefined\n\n    if (activeItemElement) {\n      focusFirstDescendant(activeItemElement)\n    }\n  }, [activeIndex])\n\n  const setRef = useCallback(\n    (el: HTMLInputElement | null) => {\n      inputRef.current = el\n      forwardedRef.current = el\n    },\n    [forwardedRef]\n  )\n\n  const clearButton = useMemo(() => {\n    if (!loading && !disabled && value.length > 0) {\n      return {\n        'aria-label': 'Clear',\n        onFocus: handleClearButtonFocus,\n      }\n    }\n\n    return undefined\n  }, [disabled, handleClearButtonFocus, loading, value])\n\n  const openButtonBoxPadding = useMemo(() => padding.map((v) => v - 2), [padding])\n  const openButtonPadding = useMemo(() => padding.map((v) => v - 1), [padding])\n  const openButtonProps: AutocompleteOpenButtonProps = useMemo(\n    () => (typeof openButton === 'object' ? openButton : EMPTY_RECORD),\n    [openButton]\n  )\n\n  const handleOpenClick = useCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      inputRef.current?.focus()\n      setQuery(query || renderValue(value, currentOption) || '')\n      if (openButtonProps.onClick) openButtonProps.onClick(event)\n    },\n    [currentOption, openButtonProps, query, renderValue, value]\n  )\n\n  const openButtonNode = useMemo(\n    () =>\n      !disabled && !readOnly && openButton ? (\n        <Box padding={openButtonBoxPadding}>\n          <Button\n            {...openButtonProps}\n            fontSize={fontSize}\n            icon={ChevronDownIcon}\n            mode=\"bleed\"\n            onClick={handleOpenClick}\n            padding={openButtonPadding}\n          />\n        </Box>\n      ) : undefined,\n    [\n      disabled,\n      fontSize,\n      handleOpenClick,\n      openButton,\n      openButtonBoxPadding,\n      openButtonPadding,\n      openButtonProps,\n      readOnly,\n    ]\n  )\n\n  const input = (\n    <TextInput\n      {...restProps}\n      aria-activedescendant={activeItemId}\n      aria-autocomplete=\"list\"\n      aria-expanded={expanded}\n      aria-owns={listboxId}\n      autoCapitalize=\"off\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      border={border}\n      clearButton={clearButton}\n      customValidity={customValidity}\n      disabled={disabled}\n      fontSize={fontSize}\n      icon={icon}\n      iconRight={loading && AnimatedSpinnerIcon}\n      id={id}\n      inputMode=\"search\"\n      onChange={handleInputChange}\n      onClear={handleClearButtonClick}\n      onFocus={handleInputFocus}\n      padding={padding}\n      prefix={prefix}\n      radius={radius}\n      readOnly={readOnly}\n      ref={setRef}\n      role=\"combobox\"\n      spellCheck={false}\n      suffix={openButtonNode}\n      value={query === null ? renderValue(value, currentOption) : query}\n    />\n  )\n\n  const content = useMemo(() => {\n    if (filteredOptions.length === 0) return null\n\n    return (\n      <ListBox padding={1} {...listBox} tabIndex={-1}>\n        <Stack\n          as=\"ul\"\n          aria-multiselectable={false}\n          id={listboxId}\n          ref={listRef}\n          role=\"listbox\"\n          space={1}\n        >\n          {filteredOptions.map((option, optionIndex) => {\n            const active = activeIndex > -1 ? optionIndex === activeIndex : currentOption === option\n\n            return (\n              <AutocompleteOption\n                id={`${id}-option-${option.value}`}\n                key={option.value}\n                onSelect={handleOptionSelect}\n                selected={active}\n                value={option.value}\n              >\n                {cloneElement(renderOption(option), {\n                  'data-selected': active ? '' : undefined,\n                  disabled: loading,\n                  tabIndex: active ? 0 : -1,\n                })}\n              </AutocompleteOption>\n            )\n          })}\n        </Stack>\n      </ListBox>\n    )\n  }, [\n    currentOption,\n    filteredOptions,\n    handleOptionSelect,\n    id,\n    listBox,\n    listboxId,\n    loading,\n    renderOption,\n    activeIndex,\n  ])\n\n  const results = useMemo(() => {\n    if (renderPopover) {\n      return renderPopover(\n        {content, hidden: !expanded, inputElement: inputRef.current},\n        setResultsPopoverElement\n      )\n    }\n\n    return (\n      <ResultsPopover\n        __unstable_margins={POPOVER_MARGINS}\n        arrow={false}\n        constrainSize\n        content={content}\n        fallbackPlacements={POPOVER_FALLBACK_PLACEMENTS}\n        matchReferenceWidth\n        onMouseEnter={handlePopoverMouseEnter}\n        onMouseLeave={handlePopoverMouseLeave}\n        open={expanded}\n        portal\n        placement={POPOVER_PLACEMENT}\n        radius={radius}\n        ref={setResultsPopoverElement}\n        referenceElement={inputRef.current}\n        {...popover}\n      />\n    )\n  }, [\n    content,\n    expanded,\n    handlePopoverMouseEnter,\n    handlePopoverMouseLeave,\n    popover,\n    radius,\n    renderPopover,\n  ])\n\n  return (\n    <Root\n      data-ui=\"Autocomplete\"\n      onBlur={handleRootBlur}\n      onKeyDown={handleRootKeyDown}\n      ref={setRootElement}\n    >\n      {input}\n      {results}\n    </Root>\n  )\n})\n\n/**\n * @public\n */\nexport const Autocomplete = InnerAutocomplete as <Option extends BaseAutocompleteOption>(\n  props: AutocompleteProps<Option> &\n    Omit<\n      React.HTMLProps<HTMLInputElement>,\n      | 'aria-activedescendant'\n      | 'aria-autocomplete'\n      | 'aria-expanded'\n      | 'aria-owns'\n      | 'as'\n      | 'autoCapitalize'\n      | 'autoComplete'\n      | 'autoCorrect'\n      | 'id'\n      | 'inputMode'\n      | 'onChange'\n      | 'onSelect'\n      | 'prefix'\n      | 'ref'\n      | 'role'\n      | 'spellCheck'\n      | 'type'\n      | 'value'\n    > & {\n      ref?: React.Ref<HTMLInputElement>\n    }\n) => React.ReactElement\n"],
  "mappings": "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",
  "names": []
}
