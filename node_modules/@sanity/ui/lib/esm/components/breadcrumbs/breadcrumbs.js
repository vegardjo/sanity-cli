import React, {
  Children,
  forwardRef,
  Fragment,
  isValidElement,
  useCallback,
  useMemo,
  useState
} from "react";
import { useClickOutside } from "../../hooks";
import { Box, Popover, Stack, Text } from "../../primitives";
import { ExpandButton, Root } from "./breadcrumbs.styles";
const Breadcrumbs = forwardRef(function Breadcrumbs2(props, ref) {
  const { children, maxLength, separator, space = 2 } = props;
  const [open, setOpen] = useState(false);
  const [expandElement, setExpandElement] = useState(null);
  const [popoverElement, setPopoverElement] = useState(null);
  const collapse = useCallback(() => setOpen(false), []);
  const expand = useCallback(() => setOpen(true), []);
  useClickOutside(collapse, [expandElement, popoverElement]);
  const rawItems = useMemo(() => Children.toArray(children).filter((child) => {
    return isValidElement(child);
  }), [children]);
  const items = useMemo(() => {
    const len = rawItems.length;
    if (maxLength && len > maxLength) {
      const beforeLength = Math.ceil(maxLength / 2);
      const afterLength = Math.floor(maxLength / 2);
      return [
        ...rawItems.slice(0, beforeLength - 1),
        /* @__PURE__ */ React.createElement(Popover, {
          constrainSize: true,
          content: /* @__PURE__ */ React.createElement(Stack, {
            as: "ol",
            overflow: "auto",
            padding: space,
            space
          }, rawItems.slice(beforeLength - 1, len - afterLength)),
          key: "button",
          open,
          placement: "top",
          portal: true,
          ref: setPopoverElement
        }, /* @__PURE__ */ React.createElement(ExpandButton, {
          fontSize: 1,
          mode: "bleed",
          onClick: open ? collapse : expand,
          padding: 1,
          ref: setExpandElement,
          selected: open,
          text: "\u2026"
        })),
        ...rawItems.slice(len - afterLength)
      ];
    }
    return rawItems;
  }, [collapse, expand, maxLength, open, rawItems, space]);
  return /* @__PURE__ */ React.createElement(Root, {
    ref
  }, items.map((item, itemIndex) => /* @__PURE__ */ React.createElement(Fragment, {
    key: itemIndex
  }, itemIndex > 0 && /* @__PURE__ */ React.createElement(Box, {
    "aria-hidden": true,
    as: "li",
    paddingX: space
  }, separator || /* @__PURE__ */ React.createElement(Text, {
    muted: true
  }, "/")), /* @__PURE__ */ React.createElement(Box, {
    as: "li"
  }, item))));
});
export {
  Breadcrumbs
};
